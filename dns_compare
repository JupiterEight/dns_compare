#!/usr/bin/python3
#
# dns_compare.py - Compare the data in a BIND zone file to the data being returned
#                  by an authoritative DNS server.
#
# Purpose:
#   Use this tool to verify the data being returned by an authoritative DNS server
#   matches the data in a zone file.
#
# Use case:
#   This is useful, for example, when you are migrating from one DNS server to another and
#   need to verify that all the records imported correctly.
#
#   In my case, I used this tool to help me during a migration of multiple domains from
#   Windows 2000 DNS and GoDaddy DNS (which can both export BIND zone files) into Amazon's
#   Route53 DNS service.  With this tool, I could confidently prove that all records
#   properly imported into Route53.
#
# Example usage:
#       $ dns_compare.py -z example.com --file example.com.zone --server 10.1.1.1
#       ....X...X..done
#       Results:
#       9 passed / 2 fail
#
#   NOTE: use -v to get a very verbose view of each dns record as it is checked
#
# Author:
#   joe miller, <joeym@joeym.net>, 12/16/2010
#

from optparse import OptionParser

import sys, socket
from pprint import pprint
from rich import print
from rich import box
from rich.color import Color
from rich.console import Console, ConsoleOptions, Group, RenderableType, RenderResult
from rich.markdown import Markdown
from rich.measure import Measurement
from rich.pretty import Pretty
from rich.segment import Segment
from rich.style import Style
from rich.syntax import Syntax
from rich.table import Table
from rich.text import Text

try:
    import dns.resolver, dns.zone
    from dns.exception import DNSException
    from dns.rdataclass import *
    from dns.rdatatype import *
except ImportError:
    print("Please install dnspython:")
    print("$ sudo pip install dnspython")
    sys.exit(1)


#####Definitions#############################


console = Console()
main_resolver = dns.resolver.Resolver()


######Debug###################################

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning) 

######Main####################################

if __name__ == '__main__':
    parser = OptionParser()
    # required options
    parser.add_option("-u", "--url", dest="zone", metavar="DOMAIN",
                        help="name of the domain we're checking (eg: domain.com)")
    parser.add_option("-f", "--file", dest="zonefile", metavar="FILE",
                        help="zone file to load records from")
    parser.add_option("-s", "--server", dest="nameserver", metavar="HOST",
                        help="DNS server to compare zone file against")
    # optional ... options
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,
                        help="print detailed results of each action")
    parser.add_option("-a","--soa", dest="compare_soa", action="store_true", default=False,
                        help="compare SOA records (default: false)")
    parser.add_option("-n","--ns", dest="compare_ns", action="store_true", default=False,
                        help="compare NS records (default: false)")
    parser.add_option("-t","--ttl", dest="compare_ttl", action="store_false", default=False,
                        help="compare TTL values (default: true)")
    parser.add_option("-c","--cname", dest="lookup_cnames", action="store_true", default=False,
                        help="lookup cname-values that do not match (default: false)")
    (opts, remaining_args) = parser.parse_args()

    # check for required options, since optparse doesn't support required options
    if opts.zone == None or opts.zonefile == None or opts.nameserver == None:
        print("Error: required arguments: --zone, --file, --server (or --help)")
        sys.exit(2)
       
    
    z = dns.zone.from_file(opts.zonefile, origin=opts.zone, relativize=False)
    
    r = dns.resolver.Resolver(configure=False)

    try:
        r.nameservers = socket.gethostbyname_ex(opts.nameserver)[2]
    except socket.error:
        console.print("Error: could not resolve 'host' %s" % opts.nameserver, style="bold red")
        sys.exit(3)

    matches=0
    cnamematches=0
    mismatches=0
    for (name, rdataset) in z.iterate_rdatasets():
        if rdataset.rdtype == SOA and not opts.compare_soa:
            continue
        if rdataset.rdtype == NS and not opts.compare_ns:
            continue

        match = False
        result = None
        try:
            ans = r.query(name, rdataset.rdtype, rdataset.rdclass)
            #ans = main_resolver.resolve(name, rdataset.rdtype, rdataset.rdclass)
            result = ans.rrset.to_rdataset()
            if result == rdataset:
                if opts.compare_ttl:
                    if result.ttl == rdataset.ttl:
                        match = True
                else:
                    match = True
        except DNSException as e:
            pass

        if opts.lookup_cnames and match == False and result == None and rdataset.rdtype == dns.rdatatype.CNAME and rdataset.rdclass == dns.rdataclass.IN:
            ans_a = r.query(name, dns.rdatatype.A, dns.rdataclass.IN)
            result_a = ans_a.rrset.to_rdataset()
            if ans_a != None:
                ans_cname = r.query(rdataset[0].target, dns.rdatatype.A, dns.rdataclass.IN)
                result_cname = ans_cname.rrset.to_rdataset()
                print("----")
                if result_cname == result_a:
                    print("(%s) query: %s" % ("[reverse][honeydew2] CNAME MATCH [/honeydew2][/]", name))
                    cnamematches += 1
                else:
                    print("(%s) query: %s" % ("[reverse][red] MISMATCH [/red][/]", name))
                    mismatches += 1
                print("Expected: ", rdataset, ' (', result_cname, ')')
                print("Received: ", result_a, "\n")
                pass

        if opts.verbose:
            description = '[reverse][spring_green3] OK [/spring_green3][/]' if match else '[reverse][red] MISMATCH [/red][/]'
            #print("[red]----[/red]")
            print("%s [green]Query:[/green][misty_rose1] %s[/misty_rose1]" % (description, name))
            if result != None and len(result) > 1:
                print("Expected:")
                print(rdataset)
                print("Received: ", "\n")
                print(result)
            else:
                print("Expected: ", rdataset)
                print("Received: ", result, "\n")

        if match:
            if not opts.verbose:
                sys.stdout.write('.')
                sys.stdout.flush()
            matches += 1
        else:
            if not opts.verbose:
                #sys.stdout.write('X')            #
                #console.print(':cross_mark:')    # Debug these  
                #print("[grey93]----[/grey93]")   # 
                print("[reverse][red]\n MISMATCH [/red][/][green] Query:[/green][misty_rose1] %s[/misty_rose1]" % name)
                if result != None and len(result) > 1:
                    print("Expected:")
                    print(rdataset)
                    print("Received: ", "\n")
                    print(result)
                else:
                    print("Expected: ", rdataset)
                    print("Received: ", result, "\n")
                sys.stdout.flush()
            mismatches += 1
    print("[reverse][dark_sea_green2]\n Finished! [/dark_sea_green2][/]")

    print("[underline][navajo_white1]\nResults[/navajo_white1][/]")
    print("[dark_sea_green3]Matches:       [/dark_sea_green3]", matches)
    if opts.lookup_cnames and cnamematches > 0:
        print("[green_yellow]CName matches: [/green_yellow]", cnamematches)
    print("[pale_violet_red1]Mismatches:   [/pale_violet_red1]", mismatches)
